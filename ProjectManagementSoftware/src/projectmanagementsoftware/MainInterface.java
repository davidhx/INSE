package projectmanagementsoftware;

/**
 * Project Management Charts Software
 *
 * @author up726086
 */
import java.awt.BorderLayout;
import java.nio.file.*;
import javax.swing.*;
import javax.swing.JOptionPane;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import org.jfree.chart.ChartPanel;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.util.Date;

public class MainInterface extends javax.swing.JFrame {

    final JFileChooser fc = new JFileChooser();
    private ArrayList<TaskNode> currentProject = new ArrayList<>();
    boolean JPanel3State = true;
    String currentMode = "Gantt";
    //date auto-correcting
    int lastDateFieldTypedIn = -1;

    /**
     * Creates new form MainInterface
     */
    public MainInterface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlChartArea = new javax.swing.JPanel();
        pnlChartTools = new javax.swing.JPanel();
        pnlGenericTools = new javax.swing.JPanel();
        txtTaskTitle = new javax.swing.JTextField();
        txtTaskID = new javax.swing.JTextField();
        lblNodeID = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtStartDate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtEndDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        pnlSpecificTools = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstPredecessors = new javax.swing.JList();
        btnAddPredecessor = new javax.swing.JButton();
        cmbAvailablePredecessors = new javax.swing.JComboBox();
        btnRemovePredecessor = new javax.swing.JButton();
        txtDuration = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        OpenProjectFileItem = new javax.swing.JMenuItem();
        SaveProjectFileItem = new javax.swing.JMenuItem();
        ViewMenu = new javax.swing.JMenu();
        WBTViewItem = new javax.swing.JMenuItem();
        PERTViewMenu = new javax.swing.JMenuItem();
        GanttViewItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Project Management Software");

        javax.swing.GroupLayout pnlChartAreaLayout = new javax.swing.GroupLayout(pnlChartArea);
        pnlChartArea.setLayout(pnlChartAreaLayout);
        pnlChartAreaLayout.setHorizontalGroup(
            pnlChartAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );
        pnlChartAreaLayout.setVerticalGroup(
            pnlChartAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 184, Short.MAX_VALUE)
        );

        pnlChartTools.setBorder(javax.swing.BorderFactory.createTitledBorder("Chart Tools"));

        pnlGenericTools.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtTaskTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTaskTitleKeyReleased(evt);
            }
        });

        txtTaskID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTaskIDKeyReleased(evt);
            }
        });

        lblNodeID.setText("Task ID:");

        jLabel1.setText("Task Title:");

        txtStartDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStartDateKeyReleased(evt);
            }
        });

        jLabel2.setText("Start Date:");

        txtEndDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEndDateKeyReleased(evt);
            }
        });

        jLabel3.setText("End Date:");

        javax.swing.GroupLayout pnlGenericToolsLayout = new javax.swing.GroupLayout(pnlGenericTools);
        pnlGenericTools.setLayout(pnlGenericToolsLayout);
        pnlGenericToolsLayout.setHorizontalGroup(
            pnlGenericToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlGenericToolsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlGenericToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNodeID, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(pnlGenericToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEndDate)
                    .addComponent(txtStartDate)
                    .addComponent(txtTaskTitle)
                    .addComponent(txtTaskID, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlGenericToolsLayout.setVerticalGroup(
            pnlGenericToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGenericToolsLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(pnlGenericToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTaskID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNodeID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenericToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTaskTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenericToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenericToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(11, 11, 11))
        );

        pnlSpecificTools.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setText("Predecessors:");

        jScrollPane1.setViewportView(lstPredecessors);

        btnAddPredecessor.setText("Add Predecessor");
        btnAddPredecessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPredecessorActionPerformed(evt);
            }
        });

        btnRemovePredecessor.setText("Remove Predecessor");
        btnRemovePredecessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovePredecessorActionPerformed(evt);
            }
        });

        txtDuration.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDurationKeyReleased(evt);
            }
        });

        jLabel5.setText("Task Duration:");

        javax.swing.GroupLayout pnlSpecificToolsLayout = new javax.swing.GroupLayout(pnlSpecificTools);
        pnlSpecificTools.setLayout(pnlSpecificToolsLayout);
        pnlSpecificToolsLayout.setHorizontalGroup(
            pnlSpecificToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSpecificToolsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSpecificToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSpecificToolsLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(jLabel4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSpecificToolsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlSpecificToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAddPredecessor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemovePredecessor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSpecificToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAvailablePredecessors, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlSpecificToolsLayout.setVerticalGroup(
            pnlSpecificToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSpecificToolsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSpecificToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSpecificToolsLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(9, 9, 9))
                    .addGroup(pnlSpecificToolsLayout.createSequentialGroup()
                        .addGroup(pnlSpecificToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(pnlSpecificToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(txtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemovePredecessor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(pnlSpecificToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbAvailablePredecessors)
                    .addComponent(btnAddPredecessor, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlChartToolsLayout = new javax.swing.GroupLayout(pnlChartTools);
        pnlChartTools.setLayout(pnlChartToolsLayout);
        pnlChartToolsLayout.setHorizontalGroup(
            pnlChartToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChartToolsLayout.createSequentialGroup()
                .addComponent(pnlGenericTools, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSpecificTools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlChartToolsLayout.setVerticalGroup(
            pnlChartToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlChartToolsLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnlChartToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlGenericTools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlSpecificTools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jButton2.setText("-");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        FileMenu.setText("File");

        OpenProjectFileItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenProjectFileItem.setText("Open Project");
        OpenProjectFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenProjectFileItemActionPerformed(evt);
            }
        });
        FileMenu.add(OpenProjectFileItem);

        SaveProjectFileItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveProjectFileItem.setText("Save Project");
        SaveProjectFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveProjectFileItemActionPerformed(evt);
            }
        });
        FileMenu.add(SaveProjectFileItem);

        jMenuBar1.add(FileMenu);

        ViewMenu.setText("View");
        ViewMenu.setActionCommand("");

        WBTViewItem.setText("Work Breakdown Tree View");
        WBTViewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WBTViewItemActionPerformed(evt);
            }
        });
        ViewMenu.add(WBTViewItem);

        PERTViewMenu.setText("PERT Chart View");
        PERTViewMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PERTViewMenuActionPerformed(evt);
            }
        });
        ViewMenu.add(PERTViewMenu);

        GanttViewItem.setText("Gantt Chart View");
        GanttViewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GanttViewItemActionPerformed(evt);
            }
        });
        ViewMenu.add(GanttViewItem);

        jMenuBar1.add(ViewMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlChartArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlChartTools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlChartArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlChartTools, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void WBTViewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WBTViewItemActionPerformed
        currentMode = "WBT";
        refreshChart();
    }//GEN-LAST:event_WBTViewItemActionPerformed


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        if (JPanel3State == true) {
            pnlChartTools.setVisible(false);
            JPanel3State = false;
        } else {
            pnlChartTools.setVisible(true);
            JPanel3State = true;
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void OpenProjectFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenProjectFileItemActionPerformed
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == 0) {
            loadProject(fc.getSelectedFile().getAbsolutePath());
            txtDuration.setText("");
            txtEndDate.setText("");
            txtStartDate.setText("");
            txtTaskID.setText("");
            txtTaskTitle.setText("");
            DefaultListModel<String> predecessorList = new DefaultListModel<>();
            lstPredecessors.setModel(predecessorList);
        } else if (returnVal == -1) {
            JOptionPane.showMessageDialog(this,
                    "The file cannot be accessed, please ensure the file exists",
                    "Project loading issue",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_OpenProjectFileItemActionPerformed

    private void SaveProjectFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveProjectFileItemActionPerformed
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fc.showSaveDialog(this);
        Boolean fileError = false;
        if (returnVal == 0) {
            String filePath = fc.getSelectedFile().getAbsolutePath();
            try {
                Files.deleteIfExists(Paths.get(filePath));
            } catch (Exception e) {
                fileError = true;
            }
            if (!fileError) {
                saveProject(fc.getSelectedFile().getAbsolutePath());
            }

        } else if (returnVal == -1) {
            fileError = true;
        }

        if (fileError) {
            JOptionPane.showMessageDialog(this,
                    "The file cannot be accessed, please ensure the file exists",
                    "Project loading issue",
                    JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_SaveProjectFileItemActionPerformed

    private void PERTViewMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PERTViewMenuActionPerformed
        currentMode = "PERT";
        refreshChart();
    }//GEN-LAST:event_PERTViewMenuActionPerformed

    private void GanttViewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GanttViewItemActionPerformed
        currentMode = "Gantt";
        refreshChart();
    }//GEN-LAST:event_GanttViewItemActionPerformed

    private void txtTaskIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTaskIDKeyReleased
        TaskNode currentTask = getTaskByID(txtTaskID.getText());
        fillInFields(currentTask);
    }//GEN-LAST:event_txtTaskIDKeyReleased

    private void txtTaskTitleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTaskTitleKeyReleased
        if (txtTaskTitle.getText().contains(",")) {
            txtTaskTitle.setText(txtTaskTitle.getText().replaceAll(",", ""));
            JOptionPane.showMessageDialog(this,
                    "Task titles are not allowed to contain commas",
                    "Comma issue", JOptionPane.INFORMATION_MESSAGE);
        }

        checkAndUpdate();
    }//GEN-LAST:event_txtTaskTitleKeyReleased

    private void txtStartDateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStartDateKeyReleased
        lastDateFieldTypedIn = 0;
        checkAndUpdate();
    }//GEN-LAST:event_txtStartDateKeyReleased

    private void btnAddPredecessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPredecessorActionPerformed

        DefaultListModel<String> predecessors = new DefaultListModel<>();
        ListModel<String> predecessorsLM = lstPredecessors.getModel();
        for (int i = 0; i < predecessorsLM.getSize(); i++) {
            predecessors.addElement(predecessorsLM.getElementAt(i));
        }

        if (cmbAvailablePredecessors.getModel().getSize() > 0) {
            String taskIDtoAdd = cmbAvailablePredecessors.getSelectedItem().toString();
            if (predecessors.indexOf(taskIDtoAdd) == -1) {
                if (!txtTaskID.getText().equals(taskIDtoAdd)) {
                    predecessors.addElement(cmbAvailablePredecessors.getSelectedItem().toString());
                } else {
                    JOptionPane.showMessageDialog(this,
                            "A task cannot be a predecessor to itself",
                            "Predecessor Invalid",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        lstPredecessors.setModel(predecessors);
    }//GEN-LAST:event_btnAddPredecessorActionPerformed

    private void btnRemovePredecessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovePredecessorActionPerformed
        int predecessorIndex = lstPredecessors.getSelectedIndex();
        DefaultListModel<String> predecessors = new DefaultListModel<>();
        ListModel<String> predecessorsLM = lstPredecessors.getModel();
        for (int i = 0; i < predecessorsLM.getSize(); i++) {
            if (i != predecessorIndex) {
                predecessors.addElement(predecessorsLM.getElementAt(i));
            }
        }
        lstPredecessors.setModel(predecessors);
    }//GEN-LAST:event_btnRemovePredecessorActionPerformed

    private void txtDurationKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDurationKeyReleased
        lastDateFieldTypedIn = 2;
        checkAndUpdate();
    }//GEN-LAST:event_txtDurationKeyReleased

    private void txtEndDateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEndDateKeyReleased
        lastDateFieldTypedIn = 1;
        checkAndUpdate();
    }//GEN-LAST:event_txtEndDateKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem GanttViewItem;
    private javax.swing.JMenuItem OpenProjectFileItem;
    private javax.swing.JMenuItem PERTViewMenu;
    private javax.swing.JMenuItem SaveProjectFileItem;
    private javax.swing.JMenu ViewMenu;
    private javax.swing.JMenuItem WBTViewItem;
    private javax.swing.JButton btnAddPredecessor;
    private javax.swing.JButton btnRemovePredecessor;
    private javax.swing.JComboBox cmbAvailablePredecessors;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblNodeID;
    private javax.swing.JList lstPredecessors;
    private javax.swing.JPanel pnlChartArea;
    private javax.swing.JPanel pnlChartTools;
    private javax.swing.JPanel pnlGenericTools;
    private javax.swing.JPanel pnlSpecificTools;
    private javax.swing.JTextField txtDuration;
    private javax.swing.JTextField txtEndDate;
    private javax.swing.JTextField txtStartDate;
    private javax.swing.JTextField txtTaskID;
    private javax.swing.JTextField txtTaskTitle;
    // End of variables declaration//GEN-END:variables

    //loading the project
    private void loadProject(String fileName) {
        String projectString = loadFile(fileName);
        if (!projectString.equals("")) {
            currentProject = createNodes(projectString);
            refreshChart();
        }
    }

    private String loadFile(String fileName) {
        String projectString = "";
        try {
            byte[] encoded = Files.readAllBytes(Paths.get(fileName));
            projectString = new String(encoded, StandardCharsets.UTF_8);
            return projectString;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "The file cannot be accessed, please ensure the file exists",
                    "Project loading issue",
                    JOptionPane.ERROR_MESSAGE);
        }
        return "";
    }

    private void saveProject(String outputPath) {
        String outputString = "";
        for (int i = 0; i < currentProject.size(); i++) {
            outputString += currentProject.get(i).toOutputString() + "\n";
        }
        if (!"".equals(outputString)) {
            outputString = outputString.substring(0, outputString.length() - 1);
            byte[] outputBytes = outputString.getBytes(StandardCharsets.UTF_8);
            Path file = Paths.get(outputPath);
            try {
                Files.write(file, outputBytes, StandardOpenOption.CREATE_NEW);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "The destination is inaccessable",
                        "Project saving issue",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private ArrayList<TaskNode> createNodes(String projectString) {
        ArrayList<TaskNode> newProject = new ArrayList<>();

        //loop to pull out each variable
        String[] nodeStrings = projectString.split("\\)");
        for (String nodeString : nodeStrings) {
            int bracketLocation = nodeString.indexOf("(");
            nodeString = nodeString.substring(bracketLocation + 1); //removes up to the first bracket
            TaskNode nodeI = new TaskNode(nodeString);
            newProject.add(nodeI);
        }
        //returns the project nodes
        return newProject;
    }

    private void ganttChart() {

        ChartPanel chartPanel = GanttChart.update("Project", getBrokenDownNodes());
        pnlChartArea.setLayout(new java.awt.BorderLayout());
        pnlChartArea.add(chartPanel, BorderLayout.CENTER);
        pnlChartArea.validate();
    }

    private void workBreakDownTree() {
        //to be written
    }

    private void pertChart() {
        //to be written
    }

    /**
     * Refreshes the chart visible on screen
     */
    private void refreshChart() {
        pnlChartArea.removeAll();
        pnlChartArea.updateUI();
        if (currentMode == "WBT") {
            workBreakDownTree();
        } else if (currentMode == "PERT") {
            pertChart();
        } else if (currentMode == "Gantt") {
            ganttChart();
        }
        //refreshes possible predecessors
        DefaultComboBoxModel predecessorList = new DefaultComboBoxModel();
        for (TaskNode task : getBrokenDownNodes()) {
            predecessorList.addElement(task.getTaskId());
        }
        cmbAvailablePredecessors.setModel(predecessorList);

    }

    /**
     * Obtains only the most broken down level of tasks from the WBT data
     * (Checks each node for subtasks)
     *
     * @return
     */
    private ArrayList<TaskNode> getBrokenDownNodes() {
        ArrayList<TaskNode> brokenDownNodes = new ArrayList<>();
        for (TaskNode task : currentProject) {

            String taskID = task.getTaskId().trim();
            boolean hasChild = false;
            for (TaskNode task2 : currentProject) {
                if (task2.getParentId().trim().equals(taskID)) {
                    hasChild = true;
                }

            }

            if (!hasChild) {
                brokenDownNodes.add(task);
            }
        }
        return brokenDownNodes;
    }

    /**
     * obtains a TaskNode with a given ID
     *
     * @param taskID
     * @return
     */
    private TaskNode getTaskByID(String taskID) {
        if (!"0".equals(taskID.trim())) {
            for (TaskNode task : currentProject) {
                if (taskID.trim().equals(task.getTaskId().trim())) {
                    return task;
                }
            }
        }
        return null;
    }

    private void fillInDates() {
        Date startDate, endDate;
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyy");
        int duration = -1;
        try {
            startDate = sdf.parse(txtStartDate.getText());
        } catch (Exception e) {
            startDate = null;
        }

        try {
            endDate = sdf.parse(txtEndDate.getText());
        } catch (Exception e) {
            endDate = null;
        }

        try {
            duration = Integer.parseInt(txtDuration.getText().trim());
        } catch (Exception e) {
            duration = -1;
        }

        if (endDate != null && startDate != null && lastDateFieldTypedIn != 2) {
            long end = endDate.getTime();
            long start = startDate.getTime();
            duration = (int)( (end - start) / (1000 * 60 * 60 * 24));
            txtDuration.setText("" + duration);
        } else if (startDate != null && duration >= 0 && lastDateFieldTypedIn != 1) {
            Calendar cal = Calendar.getInstance();
            cal.setTime(startDate);
            cal.add(Calendar.DATE, duration);
            endDate = cal.getTime();
            txtEndDate.setText(sdf.format(endDate));
        } else if (endDate != null && duration >= 0 && lastDateFieldTypedIn != 0) {
            Calendar cal = Calendar.getInstance();
            cal.setTime(endDate);
            cal.add(Calendar.DATE, -duration);
            startDate = cal.getTime();
            txtStartDate.setText(sdf.format(startDate));

        }
    }

    private void fillInFields(TaskNode task) {
        if (task == null) {
            txtDuration.setText("");
            txtEndDate.setText("");
            txtStartDate.setText("");
            txtTaskTitle.setText("");
        } else {
            txtDuration.setText("" + task.getDuration());
            txtEndDate.setText(task.getEndDateString());
            txtStartDate.setText(task.getStartDateString());
            txtTaskID.setText(task.getTaskId());
            txtTaskTitle.setText(task.getTaskTitle());
            DefaultListModel<String> predecessorList = new DefaultListModel<>();
            task.getTaskPredecessors().stream().forEach((predecessorID) -> {
                predecessorList.addElement(predecessorID);
            });
            lstPredecessors.setModel(predecessorList);
        }
    }

    private void checkAndUpdate() {
        fillInDates();
        Date startDate;
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyy");
        try {
            startDate = sdf.parse(txtStartDate.getText());
        } catch (Exception e) {
            startDate = null;
        }

        if (startDate != null && txtTaskTitle.getText().matches("\\d*(.\\d*)*")) {
            updateTaskNode();
        }
        
    }

    private void updateTaskNode() {
        TaskNode currentTask = getTaskByID(txtTaskID.getText().trim());
        TaskNode newCurrentTask = null;
        if (currentTask != null) {
            currentProject.remove(currentTask);
        }
        ArrayList<String> predecessors = new ArrayList<>();
        for (int i = 0; i < lstPredecessors.getModel().getSize(); i++) {
            predecessors.add(lstPredecessors.getModel().getElementAt(i).toString());
        }
        int[] newWbtCoords = {0, 0}; //set to 0,0 by default until graph type is supported
        int[] newPertCoords = {0, 0}; //set to 0,0 by defult until graph type is supported
        int newGanttPosition = 0; //currently set to 0 until sorting is supported
        try {
            newCurrentTask = new TaskNode(txtTaskID.getText(), txtTaskTitle.getText(),
                    txtStartDate.getText(), Integer.parseInt(txtDuration.getText().trim()), predecessors,
                    newWbtCoords, newPertCoords, newGanttPosition);

            currentProject.add(newCurrentTask);
        } catch (Exception e) {

        }
        refreshChart();

    }
}
